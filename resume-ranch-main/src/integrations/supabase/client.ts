
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lmlpghrncrblwbvoupxx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxtbHBnaHJuY3JibHdidm91cHh4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxMDUyOTQsImV4cCI6MjA1NzY4MTI5NH0.QUuN-2CgYsWRt75jP3UWRpzJOXmNridtHiKQ8ftqOxg";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true
  },
  global: {
    // Enhanced error handling for database role and API key issues
    fetch: (url, options) => {
      // Create a copy of headers to modify
      const headers = new Headers(options?.headers);
      
      // Ensure apikey header is set
      if (!headers.has('apikey')) {
        headers.set('apikey', SUPABASE_PUBLISHABLE_KEY);
      }
      
      if (!headers.has('X-Client-Info')) {
        headers.set('X-Client-Info', 'supabase-js-web/2.49.1');
      }
      
      // Add fallback mode marker for better error recovery
      headers.set('X-Role-Fallback', 'enabled');
      
      // Return the fetch call with the modified headers
      return fetch(url, {
        ...options,
        headers
      }).then(async (response) => {
        // If response is not OK, we can add some custom error handling here
        if (!response.ok) {
          // Clone the response so we can read the body and still return the original response
          const clonedResponse = response.clone();
          try {
            const errorData = await clonedResponse.json();
            
            // Broadcast role-related errors to the application
            if (
              (errorData?.message?.includes('role') && 
              errorData?.message?.includes('does not exist')) ||
              errorData?.message?.includes('insufficient permissions')
            ) {
              console.warn('Role-related database error detected, using fallback mode');
              
              // Dispatch a custom event to notify components
              document.dispatchEvent(new CustomEvent('supabase-role-error', { 
                detail: { message: errorData.message }
              }));
            }
            
            // Handle API key issues
            if (errorData?.message?.includes('No API key found') || 
                errorData?.message?.includes('Invalid API key')) {
              console.error('API Key error detected:', errorData.message);
              console.info('Headers sent:', Object.fromEntries([...headers.entries()]));
              
              // Dispatch an API key error event
              document.dispatchEvent(new CustomEvent('supabase-apikey-error', { 
                detail: { message: errorData.message }
              }));
            }
            
            // Log other errors for debugging
            if (!errorData?.message?.includes('role') && 
                !errorData?.message?.includes('API key')) {
              console.error('Supabase query error:', errorData);
            }
          } catch (e) {
            // Unable to parse error as JSON, just continue
            console.warn('Unable to parse Supabase error response', e);
          }
        }
        return response;
      });
    }
  }
});

// Helper function to check if a response has a role-related error
export const hasRoleError = (error: any): boolean => {
  if (!error) return false;
  
  const errorMessage = typeof error === 'object' ? 
    (error.message || error.error || JSON.stringify(error)) : 
    String(error);
    
  return errorMessage.includes('role') && 
         (errorMessage.includes('does not exist') || 
          errorMessage.includes('insufficient permissions'));
};

// Helper to check for API key errors
export const hasApiKeyError = (error: any): boolean => {
  if (!error) return false;
  
  const errorMessage = typeof error === 'object' ? 
    (error.message || error.error || JSON.stringify(error)) : 
    String(error);
    
  return errorMessage.includes('API key') || 
         errorMessage.includes('apikey');
};

// Helper to get a user-friendly error message
export const getFriendlyErrorMessage = (error: any): string => {
  if (!error) return 'Unknown error occurred';
  
  const errorMessage = typeof error === 'object' ? 
    (error.message || error.error || JSON.stringify(error)) : 
    String(error);
  
  if (hasRoleError(errorMessage)) {
    return 'Database role configuration issue. The system is working in fallback mode.';
  } else if (hasApiKeyError(errorMessage)) {
    return 'API authentication issue. Please try refreshing the page.';
  } else {
    return errorMessage;
  }
};
